{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","user","postId","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","setCaption","progress","setProgress","image","setImage","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","rand","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","open","setOpen","setUsername","password","setPassword","email","setEmail","setUser","openSignIn","setOpenSignIn","onAuthStateChanged","authUser","id","post","Modal","onClose","style","Input","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8dca127e.chunk.js","sourcesContent":["import firebase from 'firebase'\r\nconst firebaseApp= firebase.initializeApp({\r\n    apiKey: \"AIzaSyDdcjidq_OjrpR6OmXbTmFzXXMo_A8IjgU\",\r\n    authDomain: \"instagram-clone-react-6fe9a.firebaseapp.com\",\r\n    databaseURL: \"https://instagram-clone-react-6fe9a.firebaseio.com\",\r\n    projectId: \"instagram-clone-react-6fe9a\",\r\n    storageBucket: \"instagram-clone-react-6fe9a.appspot.com\",\r\n    messagingSenderId: \"1022440954103\",\r\n    appId: \"1:1022440954103:web:6b074a3faacc135a255bf2\",\r\n    measurementId: \"G-KZ178CZ2PJ\"\r\n})\r\n\r\nconst db= firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\nexport { db,auth,storage};","import React,{useState, useEffect} from 'react'\r\nimport './Post.css' \r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport {db} from './firebase'\r\nimport firebase from 'firebase'\r\nfunction Post({user,postId,username,caption,imageUrl}) {\r\n    const [comments,setComments] = useState([]);\r\n    const [comment,setComment] = useState('')\r\n  useEffect(()=>{\r\n    let unsubscribe;\r\n    if(postId){\r\n      unsubscribe = db\r\n      .collection(\"posts\")\r\n      .doc(postId)\r\n      .collection(\"comments\")\r\n      .orderBy('timestamp','desc')\r\n      .onSnapshot((snapshot)=>{\r\n        setComments(snapshot.docs.map((doc)=>doc.data()))\r\n      });\r\n    }\r\n    return ()=>{\r\n      unsubscribe();\r\n\r\n    };\r\n\r\n  },[postId])\r\n  const postComment = (event)=>{\r\n      event.preventDefault();\r\n      db.collection('posts').doc(postId).collection('comments').add({\r\n        text:comment,\r\n        username:user.displayName,\r\n        timestamp:firebase.firestore.FieldValue.serverTimestamp()\r\n      });\r\n      setComment('')\r\n  }\r\n    return (\r\n        <div className=\"post\">\r\n          <div className=\"post__header\">\r\n            <Avatar \r\n                    className=\"post__avatar\" \r\n                    alt=\"Yash Gupta\" \r\n                    src=\"/static/images/avatar/1.jpg\" \r\n             />\r\n\r\n            <h3>{username}</h3>\r\n\r\n          </div>\r\n       \r\n            <img className=\"post__image\"\r\n            src={imageUrl}\r\n            alt=\"\"/>\r\n            <h4 className=\"post__text\"><strong>{username}</strong> :{caption}</h4>\r\n            <div className=\"post__comments\">\r\n            {\r\n              comments.map((comment)=>(\r\n              <p><strong>{comment.username}</strong>{comment.text}</p>\r\n              ))\r\n            }\r\n           \r\n            </div>\r\n           {user && (\r\n                 <form>\r\n                 <input\r\n                 className=\"post__input\"\r\n                 type=\"text\"\r\n                 placeholder=\"Add a comment\"\r\n                 value={comment}\r\n                 onChange={(e)=>setComment(e.target.value)}/>\r\n   \r\n                 <button\r\n                 className=\"post__input\"\r\n                 \r\n                 type=\"submit\"\r\n                 onClick={postComment}\r\n                 >Post</button>\r\n               </form>\r\n           ) }\r\n         \r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React,{useState} from 'react'\r\nimport {Button} from '@material-ui/core'\r\nimport {storage,db} from './firebase'\r\nimport firebase from \"firebase\"\r\nimport  './ImageUpload.css'\r\nfunction ImageUpload({username}) {\r\n    const [caption,setCaption] = useState('');\r\n    const [progress,setProgress] = useState(0);\r\n    const [image,setImage] = useState(null);\r\n    const handleChange = (e)=>{\r\n        if(e.target.files[0]){\r\n            setImage(e.target.files[0]);\r\n        }\r\n    };\r\n    const handleUpload = ()=>{\r\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n        uploadTask.on(\r\n            \"state_changed\",\r\n            (snapshot) =>{\r\n                const progress = Math.round(\r\n                    (snapshot.bytesTransferred/snapshot.totalBytes) * 100\r\n                );\r\n                setProgress(progress);\r\n            },\r\n            (error)=>{\r\n                console.log(error);\r\n\r\n                alert(error.message);\r\n            },\r\n            ()=>{\r\n                storage\r\n                .ref(\"images\")\r\n                .child(image.name)\r\n                .getDownloadURL()\r\n                .then(url=>{\r\n                    db.collection(\"posts\").add({\r\n                        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                        caption: caption,\r\n                        imageUrl: url,\r\n                        username:username\r\n                    });\r\n                    setProgress(0);\r\n                    setCaption('');\r\n                    setImage(null);\r\n                })\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"imageUpload\">\r\n            <progress className=\"imageUpload__progress\" value = {progress} max = \"100\"/>\r\n            <input type=\"text\" placeholder=\"enter a caption..\" onChange={event=>setCaption(event.target.value)} value={caption}/>\r\n            <input type=\"file\" onChange={handleChange}/>\r\n            <Button onClick={handleUpload}>Upload</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageUpload\r\n","import InstagramEmbed from 'react-instagram-embed';\n\nimport React,{useState,useEffect} from 'react';\nimport './App.css';\nimport {db,auth} from './firebase'\nimport Post from './Post'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport {Input,Button} from '@material-ui/core';\nimport ImageUpload from './ImageUpload'\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] =useState(getModalStyle);\n  const [posts,setPosts]=useState([]);\n  const [open,setOpen]= useState(false);\n  const [username,setUsername] = useState('');\n  const [password,setPassword] = useState('');\n  const [email,setEmail] = useState('');\n  const [user,setUser] = useState(null);\n  const  [openSignIn,setOpenSignIn] = useState(false);\n\n  useEffect(()=>{\n    const unsubscribe = auth.onAuthStateChanged((authUser)=>{\n      if(authUser){\n        console.log(authUser);\n        setUser(authUser);\n       }\n      else{\n        setUser(null);\n      }\n    })\n    return ()=>{\n      unsubscribe(); \n    }\n  },[user,username])\n  useEffect(()=>{\n    db.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot=>{\n      setPosts(snapshot.docs.map(doc=>({\n        id:doc.id,\n        post:doc.data()})))\n    })\n  },[]);\n  const signUp = (event)=>{\n    event.preventDefault();\n    auth\n    .createUserWithEmailAndPassword(email,password)\n    .then((authUser)=>{\n     return authUser.user.updateProfile({\n        displayName: username,\n      })\n    })\n    .catch((error)=>alert(error.message));\n\n    setOpen(false);\n  }\n  const signIn= (event) =>{\n    event.preventDefault();\n    auth \n    .signInWithEmailAndPassword(email,password)\n    .catch((error)=> alert(error.message))\n    setOpenSignIn(false);\n  }\n  return (\n    <div className=\"app\">\n   \n\n      <Modal\n        open={open}\n         onClose={()=>setOpen(false)}\n      >\n      <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n          <center>\n            <img \n             className=\"app_headerImage\" \n              src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n              alt=\"\"/>\n           </center>\n           <Input\n            placeholder=\"username\"\n            type=\"text\"\n            value={username}\n            onChange={(e)=>setUsername(e.target.value)}/>  \n\n          <Input\n            placeholder=\"email\"\n            type=\"text\"\n            value={email}\n            onChange={(e)=>setEmail(e.target.value)}/> \n\n          <Input\n            placeholder=\"password\"\n            type=\"password\"\n            value={password}\n            onChange={(e)=>setPassword(e.target.value)}/> \n\n            <Button type=\"submit\" onClick={signUp}>Sign Up</Button>\n        </form>     \n      </div>      \n     </Modal>\n\n     <Modal\n        open={openSignIn}\n         onClose={()=>setOpenSignIn(false)}\n      >\n      <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n          <center>\n            <img className=\"app_headerImage\" \n              src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n              alt=\"\"/>\n           </center>\n        \n          <Input\n            placeholder=\"email\"\n            type=\"text\"\n            value={email}\n            onChange={(e)=>setEmail(e.target.value)}/> \n\n          <Input\n            placeholder=\"password\"\n            type=\"password\"\n            value={password}\n            onChange={(e)=>setPassword(e.target.value)}/> \n\n            <Button type=\"submit\"onClick={signIn}>Sign In</Button>\n        </form>     \n      </div>      \n     </Modal>\n\n     <div className=\"app__header\">\n        <img className=\"app_headerImage\" \n        src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n        alt=\"\"/>\n        {\n            user?\n              (\n                <Button onClick={()=>auth.signOut()}>Log Out</Button>\n              ):\n              (      \n                <div className=\"app__loginContainer\"> \n                  <Button onClick={()=>setOpenSignIn(true)}>Log in</Button>\n                <Button onClick={()=>setOpen(true)}>Sign Up</Button>\n                </div>\n              ) }\n      </div>\n      <div className=\"app__posts\">\n             <div className=\"app__postsLeft\">\n                {\n                   posts.map(({id,post})=>(\n                  <Post user={user} key={id} postId = {id} username={post.username} caption={post.caption} imageUrl={post.imageUrl}/>\n\n                  ))\n                }\n                </div>\n                \n                <div className=\"app__postsRight\">\n                <InstagramEmbed\n                      url='https://instagr.am/p/Zw9o4/'\n                      maxWidth={320}\n                      hideCaption={false}\n                      containerTagName='div'\n                      protocol=''\n                      injectScript\n                      onLoading={() => {}}\n                      onSuccess={() => {}}\n                      onAfterRender={() => {}}\n                      onFailure={() => {}}\n                />\n\n\n                </div>\n    \n\n      </div>          \n\n        {user?.displayName ? (\n          <ImageUpload username={user.displayName}/>\n        ):(\n          <h3>Sorry you need to loginn</h3>\n        )}\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}